@using System.Threading
@using Microsoft.JSInterop
@typeparam T
@inject IJSRuntime Js
@implements IAsyncDisposable
@namespace MihapComponents.InfinityScroll

@foreach (var item in _items)
{
    if (ItemTemplate != null)
    {
        @ItemTemplate(item)
    }
}
@if (_loading)
{   
    @LoadingTemplate
}
@if (_isEndOfData)
{
    @EndOfDataTemplate
}

<div @ref="_lastItemIndicator" style="height:1px"></div>

@code {
    private readonly List<T> _items = [];
    private ElementReference _lastItemIndicator;
    private DotNetObjectReference<InfinityScroll<T>>? _currentComponentReference;
    private IJSObjectReference? _instance;
    private IJSObjectReference? _module;
    private bool _loading;
    private CancellationTokenSource? _loadItemsCts;
    private bool _isEndOfData;

    [Parameter]
    public InfinityScrollDelegate<T>? ItemsProvider { get; set; }

    [Parameter]
    public RenderFragment<T>? ItemTemplate { get; set; }

    [Parameter]
    public RenderFragment? LoadingTemplate { get; set; }
    
    [Parameter]
    public int PerPage { get; set; }
    
    [Parameter]
    public RenderFragment? EndOfDataTemplate { get; set; }

    public Task ResetAsync()
    {
        _isEndOfData = false;
        return LoadMoreItems();
    }

    [JSInvokable]
    public async Task LoadMoreItems()
    {
        if (_loading || _isEndOfData)
            return;

        if (ItemsProvider == null)
            return;

        _loading = true;
        try
        {
            _loadItemsCts ??= new CancellationTokenSource();

            StateHasChanged(); // Allow the UI to display the loading indicator
            try
            {
                var newItems = await ItemsProvider(_loadItemsCts.Token);
                _items.AddRange(newItems);
                if (_instance != null) await _instance.InvokeVoidAsync("onNewItems");
                if (newItems.Count < PerPage)
                {
                    _isEndOfData = true;
                }
            }
            catch (OperationCanceledException oce) when (oce.CancellationToken == _loadItemsCts.Token)
            {
                // No-op; we canceled the operation, so it's fine to suppress this exception.
            }
        }
        finally
        {
            _loading = false;
        }

        StateHasChanged(); // Display the new items and hide the loading indicator

        if (_isEndOfData)
        {
            await DisposeAsync();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Initialize the IntersectionObserver
        if (firstRender)
        {
            _module = await Js.InvokeAsync<IJSObjectReference>("import", "./_content/MihapComponents/InfinityScroll.js");
            _currentComponentReference = DotNetObjectReference.Create(this);
            _instance = await _module.InvokeAsync<IJSObjectReference>("initialize", _lastItemIndicator, _currentComponentReference);
        }
    }

    public async ValueTask DisposeAsync()
    {
        _loadItemsCts?.Dispose();
        _loadItemsCts = null;
    
        if (_instance != null)
        {
            await _instance.InvokeVoidAsync("dispose");
            await _instance.DisposeAsync();
            _instance = null;
        }
        
        if (_module != null)
        {
            await _module.DisposeAsync();
        }
        
    
        _currentComponentReference?.Dispose();
    }
}