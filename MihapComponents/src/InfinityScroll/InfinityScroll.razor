@using System.Threading
@using Microsoft.JSInterop
@inject IJSRuntime Js
@implements IAsyncDisposable
@namespace MihapComponents.InfinityScroll

@ChildContent
@if (_loading)
{   
    @LoadingTemplate
}
<div @ref="_lastItemIndicator" style="height:1px"></div>

@code {
    private ElementReference _lastItemIndicator;
    private DotNetObjectReference<InfinityScroll>? _currentComponentReference;
    private IJSObjectReference? _instance;
    private IJSObjectReference? _module;
    private bool _loading;
    private CancellationTokenSource? _loadItemsCts;

    [Parameter] public RenderFragment ChildContent { get; set; } = null!;
    
    [Parameter]
    public bool IsEndOfData { get; set; }

    [Parameter]
    public InfinityScrollDelegate? ItemsProvider { get; set; }

    [Parameter]
    public RenderFragment? LoadingTemplate { get; set; }
    
    [JSInvokable]
    public async Task LoadMoreItems()
    {
        if (_loading || IsEndOfData)
            return;

        if (ItemsProvider == null)
            return;

        _loading = true;
        try
        {
            _loadItemsCts ??= new CancellationTokenSource();

            StateHasChanged();
            try
            {
                await ItemsProvider(_loadItemsCts.Token);
                if (_instance != null) await _instance.InvokeVoidAsync("onNewItems");
            }
            catch (OperationCanceledException oce) when (oce.CancellationToken == _loadItemsCts.Token)
            {
                // No-op; we canceled the operation, so it's fine to suppress this exception.
            }
        }
        finally
        {
            _loading = false;
        }

        StateHasChanged(); // Display the new items and hide the loading indicator

        if (IsEndOfData)
        {
            await DisposeAsync();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Initialize the IntersectionObserver
        if (firstRender)
        {
            _module = await Js.InvokeAsync<IJSObjectReference>("import", "./_content/MihapComponents/InfinityScroll.js");
            _currentComponentReference = DotNetObjectReference.Create(this);
            _instance = await _module.InvokeAsync<IJSObjectReference>("initialize", _lastItemIndicator, _currentComponentReference);
        }
    }

    public async ValueTask DisposeAsync()
    {
        _loadItemsCts?.Dispose();
        _loadItemsCts = null;
    
        if (_instance != null)
        {
            await _instance.InvokeVoidAsync("dispose");
            await _instance.DisposeAsync();
            _instance = null;
        }
        
        if (_module != null)
        {
            await _module.DisposeAsync();
        }
        
        _currentComponentReference?.Dispose();
    }
}